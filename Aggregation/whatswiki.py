# -*- coding: utf-8 -*-
"""whatsWiki.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QAR5hg6_Wz8M3oG3aF99wO4Hblrrtrdz
"""

############################################################
# NETS 213: Homework 7
############################################################

import pandas as pd

# Part 1 - Majority vote

def majority_vote(wiki_res):
    labels = dict()

    for index, row in wiki_res.iterrows(): # put every attr-adj pairing in dictionary with labels
      for i in range(1, 11):
        title = row['Input.title_' + str(i)]
        answer = row['Answer.title_' + str(i)]
        

        if title not in labels: # put in dictionary
          labels[title] = 0

        if answer == "Yes":
          labels[title] += 1
        else: # meaning tup is not in labels
          labels[title] -= 1
        # ignore blanks

    result = []
    # make the result list of tuples
    for title in labels:
      if labels[title] > 0: # if positive, majority is Yes
        new_tup = (title, True)
        result.append(new_tup)
      else: # if negative, majority is No
        new_tup = (title, False)
        result.append(new_tup)

    result = sorted(result, key=lambda tup: (tup[0], tup[1])) 
    return result

def agg_model(wiki_agg) :
  workers = set()
  articles = set()
  descripts = {}
  numworkers = 0
  numdescripts = 0
  numarticles = 0
  best_descripts = {}

  for worker in wiki_agg["Worker.ID"]:
    numdescripts = numdescripts + 1;
    if worker not in workers:
      numworkers = numworkers + 1;
      workers.add(worker)

  for article in wiki_agg["Article Title: Month"]:
    if article not in articles:
      numarticles = numarticles + 1
      articles.add(article)
  numdescripts = int (numdescripts / numarticles)
 
  for article in articles:
    best_descripts[article] = (0, 1)
    for i in range(1, numdescripts + 1):
      description_num = "Description" + str(i)
      description_score = "Description" + str(i) + " Score"
      key = (article,description_num, description_score);
      descripts[key] = 0
  for index, row in wiki_agg.iterrows(): 
    for key in descripts:
      (art, d_num, d_score) = key
      if row['Article Title: Month'] == art:
          descripts[key] = row[d_score] + descripts[key]

  for key in descripts:
    descripts[key] = float (descripts[key]) / float (numworkers)

  for article in articles:
    for key in descripts:

      (blank, d_num, d_score) = key
      new_key = (article, d_num, d_score)
      (score, text) = best_descripts[article]
      if descripts[new_key] >= score:
        df = wiki_agg[d_num]
        best_descripts[article] = (descripts[new_key], d_num)

  score_and_text = {}
  for index, row in wiki_agg.iterrows(): 
    for key in best_descripts:
      (score, d_num) = best_descripts[key]
      if row['Article Title: Month'] == key:
          score_and_text[key] = (score, row[d_num])

  return score_and_text


  
      


# Your main function

def main():
    # Read in CVS result file with pandas
    # PLEASE DO NOT CHANGE
    wiki_res = pd.read_csv('whatsWiki.csv')

    #Call functions and output required CSV files
    list = majority_vote(wiki_res)
    df = pd.DataFrame(list)
    df.columns = ['title', 'label']
    df.to_csv('output1.csv', index=False)

    wiki_res = pd.read_csv('WhatsWikiAgg.csv')
    dict = agg_model(wiki_res)
    df = pd.DataFrame.from_dict(dict, orient='index')
    df.columns = ['Avg. Score', 'Best Description']
    df.rename(columns={0:'Article: Month'}, inplace=True )
    df.to_csv('output2.csv', index=True)

    

if __name__ == '__main__':
    main()